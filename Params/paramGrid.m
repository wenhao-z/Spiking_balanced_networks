function [parGrid, dimParGrid] = paramGrid(NetPars)
% Generate parameter grid to scan the parameter space. 
% The grid is generated by using the fields in NetPars who has
% more than one COLUMN. 

% Author: Wen-Hao Zhang, June-15, 2017
% wenhaoz1@andrew.cmu.edu
% @Carnegie Mellon University

NetParsCell = struct2cell(NetPars);
parNames = fieldnames(NetPars);

% logical value indicating which variable has multiple values
IdxPars_MultiVal = cellfun(@(x) (size(x, 2)>1) & (~ischar(x)), NetParsCell); 

% The value of parameters which have multiple values
parGridVal = NetParsCell(IdxPars_MultiVal);

% size of parGrid this function will generate
szParGrid = cellfun(@(x) size(x,2), NetParsCell(IdxPars_MultiVal))';

if isempty(szParGrid)
   parGrid = NetPars;
   dimParGrid = [];
   return
end
%% 
dimParGrid = [NetParsCell(IdxPars_MultiVal), ...
    parNames(IdxPars_MultiVal), ...
    mat2cell(cellfun(@(x) size(x,1), NetParsCell(IdxPars_MultiVal)), ones(1, sum(IdxPars_MultiVal)), 1)];
dimParGrid = cell2struct(dimParGrid, {'valuePar', 'namePar', 'sizePar'}, 2)';

%%
parGrid = repmat(NetParsCell, [1, szParGrid]); % high-dim struct array
parGrid = reshape(parGrid, size(parGrid,1), []); % 2D struct array, 
% 1st dim is different parameters of a NetPars

IdxPars_MultiVal = find(IdxPars_MultiVal);
for iter = 1: length(szParGrid)
    % The value of parameter with multiple values
    xGridVal = mat2cell(parGridVal{iter}, size(parGridVal{iter},1), ones(1, szParGrid(iter))); % convert a mXn array into 1Xn cell with each a mX1 array
    xGridVal = shiftdim(xGridVal(:), 1-iter); % shift the dim to the order of this multiple parameter
    szRepmat = szParGrid;
    szRepmat(iter) = 1;
    xGridVal = repmat(xGridVal, szRepmat); % A 
    
    parGrid(IdxPars_MultiVal(iter), :) = xGridVal(:)';
end

parGrid = reshape(parGrid, [size(parGrid, 1), szParGrid]); % reshape it into a high-dim struct array
parGrid = cell2struct(parGrid, parNames);
